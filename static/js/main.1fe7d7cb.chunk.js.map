{"version":3,"sources":["images/music_bable.png","images/movie_gallery.png","images/survey.png","images/professional.jpg","images/To_Do_List.png","Album.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Copyright","Typography","variant","color","align","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","Album","classes","Fragment","CssBaseline","AppBar","position","Toolbar","noWrap","className","Container","maxWidth","component","gutterBottom","style","width","float","borderRadius","margin","src","ProfilePic","alt","textAlign","paragraph","Grid","container","justify","item","Button","Link","textDecoration","href","xs","sm","Card","CardMedia","image","MusicBabel","CardContent","CardActions","size","MovieGallery","Survey","title","ToDoList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fe7d7cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/music_bable.cee66db4.png\";","module.exports = __webpack_public_path__ + \"static/media/movie_gallery.4385aa54.png\";","module.exports = __webpack_public_path__ + \"static/media/survey.569f1b0d.png\";","module.exports = __webpack_public_path__ + \"static/media/professional.0527a32d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/To_Do_List.b2824a4b.png\";","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport MusicBabel from \"./images/music_bable.png\"\nimport MovieGallery from \"./images/movie_gallery.png\";\nimport Survey from \"./images/survey.png\";\nimport ProfilePic from \"./images/professional.jpg\";\nimport ToDoList from \"./images/To_Do_List.png\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n  Christopher Neisen {\"\"}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\n\n\nexport default function Album() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Christopher J Neisen's Portfolio\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography\n              component=\"h1\"\n              variant=\"h2\"\n              align=\"center\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              Christopher Neisen\n            </Typography>\n            <img\n              style={{\n                width: \"30%\",\n                float: \"left\",\n                borderRadius: \"100%\",\n                margin: 10,\n              }}\n              className=\"profilepic\"\n              src={ProfilePic}\n              alt=\"me\"\n            ></img>\n            <Typography\n              style={{\n                textAlign: \"justify\",\n              }}\n              variant=\"h5\"\n              align=\"center\"\n              color=\"textSecondary\"\n              paragraph\n            >\n              Professional software engineer! I am currently living out the\n              fulfillment of a lifelong dream and couldn't be happier. I've\n              always had an interest in what goes on behind the scenes of\n              software systems. I’ve invested a lot of time diving deep and I'm\n              always determined to learning and growing more. <br /> <br /> In my free time I\n              like to play volleyball and tennis. I love to swim at the lakes\n              and I also enjoy hiking. One of my favorite ways to spend a summer\n              evening is around a bonfire with friends. I also love listening to\n              music. <br /> <br /> I have a drive and passion to do a job and do it well and\n              to become my best self. I'm always seeking to learn and grow and\n              improve myself in every way. I have a gift where I easily inspire\n              others to do their best as well and know how to keep people\n              motivated to the goals they have and can easily lead people in the\n              right direction if they get off track. I have leadership\n              experience both professionally as well as personally, I'm also a\n              very likable person, and that allows me to bring a lot to the\n              table.\n            </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\">\n                    <Link\n                      style={{\n                        textDecoration: \"none\",\n                      }}\n                      color=\"inherit\"\n                      href=\"https://docs.google.com/document/d/11ieH6lMNW8W67YM0Ms8W2nSe2reLxzHDn-5UTIXaBLc/edit?usp=sharing\"\n                    >\n                      View resume\n                    </Link>{\" \"}\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            <Grid xs={12} sm={6}>\n              <Card className={classes.card}>\n                <CardMedia className={classes.cardMedia} image={MusicBabel} />\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Music Babel\n                  </Typography>\n                  <Typography>\n                    A music community app. Users can recommend songs, rate and\n                    comment on recommended songs, and also generate a random\n                    song. This app utlizes Spotify APIs and allows the user to\n                    link to their spotify account. Registeration and login is\n                    required to interact with the app in any way. Users can view\n                    recommendations and comments without being logged in, but\n                    these features are read only and no further features of the\n                    app are accessable or visable to non-members. A more indepth\n                    explanation of all of the features can be found below.\n                    Screenshots are included for visaul aid.\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button\n                    style={{\n                      width: \"100%\",\n                      backgroundColor: \"lightblue\",\n                    }}\n                    size=\"large\"\n                    color=\"primary\"\n                  >\n                    <Link\n                      style={{\n                        textDecoration: \"none\",\n                      }}\n                      color=\"inherit\"\n                      href=\"https://github.com/cneisen234/music_babel\"\n                    >\n                      View GitHub\n                    </Link>{\" \"}\n                    <GitHubIcon />\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n            <Grid xs={12} sm={6}>\n              <Card className={classes.card}>\n                <CardMedia className={classes.cardMedia} image={MovieGallery} />\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Movie Gallery\n                  </Typography>\n                  <Typography>\n                    A gallery of movies stored in a database. The header will\n                    scroll through a random generated movie poster from the\n                    database and scroll it in from the right, it will hang in\n                    the middle for a few seconds, and then exit via the left. It\n                    will then be replaced with another random generated poster\n                    and repeat the process. Below that a list of all of the\n                    movies will be listed. If you hover over a picture you will\n                    see a notice that says to click here for more info on that\n                    movie. If you click on that spot you will be brought to the\n                    details page where you can see more details about the movie,\n                    click the edit button to edit this information.\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button\n                    style={{\n                      width: \"100%\",\n                      backgroundColor: \"lightblue\",\n                    }}\n                    size=\"large\"\n                    color=\"primary\"\n                  >\n                    <Link\n                      style={{\n                        textDecoration: \"none\",\n                      }}\n                      color=\"inherit\"\n                      href=\"https://github.com/cneisen234/Movie-Gallery\"\n                    >\n                      View GitHub\n                    </Link>{\" \"}\n                    <GitHubIcon />\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n            <Grid xs={12} sm={6}>\n              <Card className={classes.card}>\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={Survey}\n                  title=\"Image title\"\n                />\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Survey Feedback Form\n                  </Typography>\n                  <Typography>\n                    A feedback form where users can give their feedback and it\n                    gets logged into a database for later review. It includes a\n                    place for the users name, how they are feeling, their\n                    understanding, and how well they feel supported. The last\n                    page is for comments and also has a final \"submit\" button\n                    appear when comments are selected. All form information is\n                    required except for comments. The feedback form also\n                    includes an admininstrative page at the path of /admin that\n                    allows admins to view all submitted feedback, see the date\n                    it was submitted, and delete any that were submitted. You\n                    can also flag any for review and the review value gets\n                    changed from false to true and sent back to the database.\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button\n                    style={{\n                      width: \"100%\",\n                      backgroundColor: \"lightblue\",\n                    }}\n                    size=\"large\"\n                    color=\"primary\"\n                  >\n                    <Link\n                      style={{\n                        textDecoration: \"none\",\n                      }}\n                      color=\"inherit\"\n                      href=\"https://github.com/cneisen234/Survey-Feedback-form\"\n                    >\n                      View GitHub\n                    </Link>{\" \"}\n                    <GitHubIcon />\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n            <Grid xs={12} sm={6}>\n              <Card className={classes.card}>\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={ToDoList}\n                  title=\"Image title\"\n                />\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    To Do List 2.0\n                  </Typography>\n                  <Typography>\n                    A simple to do list used to keep track of daily or weekly\n                    tasks. Comes complete with a built in clock, a due date\n                    generated based on priority level, and a count down timer\n                    that counts down to the due date. 4 columns exist where each\n                    task gets sorted based on the following conditions: \"added\n                    but not started\", \"started but not completed\", \"completed\" ,\n                    and \"past due\". These are auto sorted for you based on the\n                    status of each task. This app is also mobile friendly and\n                    can be used on any mobile device.\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button\n                    style={{\n                      width: \"100%\",\n                      backgroundColor: \"lightblue\",\n                    }}\n                    size=\"large\"\n                    color=\"primary\"\n                  >\n                    <Link\n                      style={{\n                        textDecoration: \"none\",\n                      }}\n                      color=\"inherit\"\n                      href=\"https://github.com/cneisen234/to-do-list-2.0\"\n                    >\n                      View GitHub\n                    </Link>{\" \"}\n                    <GitHubIcon />\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Album from \"./Album\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Album />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}